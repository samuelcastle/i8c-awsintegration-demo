# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  i8c-awsintegration-demo

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:

  # Eventbus Configuration
  EventbusName:
    Type: String
    Default: i8c-wickey-orders

  # FollowUp Configuration
  FollowupESUrl:
    Type: String
    Default: REPLACEME
  FollowupESUsername:
    Type: String
    Default: REPLACEME
  FollowupESPassword:
    Type: String
    Default: REPLACEME

  # Magento Configuration
  MagnetoSystemIdentifier:
    Type: String
    Default: REPLACEME
  MagnetoAccessToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: MagnetoAccessToken
    Description: The instance name SSM parameter
  MagnetoHostname:
    Type: AWS::SSM::Parameter::Value<String>
    Default: MagnetoHostname
  MagnetoApiPageSize:
    Type: String
    Default: 5
  
  # Telegram Configuration
  TelegramUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: TelegramUrl
  TelegramChatId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: TelegramChatId
  PollingPointerDynamoDbName:
    Type: String
    Default: REPLACEME

  # MS Teams Configuration
  MSTeamsWebhookUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: MSTeamsWebhookUrl

  # Mailchimp Configuration
  MailchimpMembersUrl:
    Type: String
    Default: https://us14.api.mailchimp.com/3.0/lists/230948/members
  MailchimpApiPassword:
    Type: String
    Default: e7beba7da55245d6da87a7a4752ae7f8-us14

  # Salesforce Configuration
  SalesforceOauthUrl:
      Type: String
      Default: REPLACEME
  SalesforceOauthClientId:
      Type: String
      Default: REPLACEME
  SalesforceOauthClientSecret:
      Type: String
      Default: REPLACEME
  SalesforceUsername:
      Type: String
      Default: REPLACEME
  SalesforcePassword:
      Type: String
      Default: REPLACEME
  SalesforceUrl:
      Type: String
      Default: REPLACEME

    
Globals:
  Function:
    Layers:
    - !Ref FunctionLayer
    - !Ref DependencyLayer
    Runtime: nodejs14.x
    Timeout: 100
    Tracing: Active
    MemorySize: 256
    Environment:
        Variables:
          FollowupESUrl: !Ref FollowupESUrl
          FollowupESUsername: !Ref FollowupESUsername
          FollowupESPassword: !Ref FollowupESPassword

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # This is an SQS queue with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  SimpleQueue:
    Type: AWS::SQS::Queue
  # This is the Lambda function definition associated with the source code: sqs-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  SQSPayloadLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs14.x
      Handler: src/handlers/sqs-payload-logger.sqsPayloadLoggerHandler
      # This property associates this Lambda function with the SQS queue defined above, so that whenever the queue
      # receives a message, the Lambda function is invoked
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SimpleQueue.Arn
      MemorySize: 128
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
  FnAdapterBolcomWebsitePoller:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bolcom-website-poller.lambdaHandler
      CodeUri: dist/adapters
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0/15 * * * ? *)
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Resource:
              - '*'
      Environment:
        Variables:
          EventbusName: !Ref EventbusName
          MagnetoAccessToken: !Ref MagnetoAccessToken
          MagnetoHostname: !Ref MagnetoHostname
          MagnetoHostname2: '{{resolve:ssm:MagnetoAccessToken}}'
          MagnetoHostname5: '{{resolve:ssm:MagnetoHostname:1}}'
  FnAvailabilitiesHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: availabilities-handler.lambdaHandler
      CodeUri: dist/handlers
      Events:
        EventbusEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref EventbusName
            Pattern:
                source:
                  - be.i8c.demo.bolcom
                  - be.i8c.demo.coolblue
      Policies:
          - Statement:
            - Effect: Allow
              Action:
                - 'xray:PutTraceSegments'
                - 'xray:PutTelemetryRecords'
              Resource:
                - '*'
      Environment:
        Variables:
          TelegramUrl: !Ref TelegramUrl
          TelegramChatId: !Ref TelegramChatId
  FunctionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: FunctionLayer
      ContentUri: src/layers/
      CompatibleRuntimes:
      - nodejs14.x
      RetentionPolicy: Retain
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: dependency-layer
      ContentUri: src/dependencies/
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Retain


  # EventBridge Connections
  I8cMailchimpConnection:
      Type: AWS::Events::Connection
      Properties:
          AuthorizationType: BASIC
          AuthParameters:
              BasicAuthParameters:
                  Username: "anystring"
                  Password: !Ref MailchimpApiPassword
  I8cMsteamsConnection:
      Type: AWS::Events::Connection
      Properties:
          AuthorizationType: API_KEY
          AuthParameters:
              ApiKeyAuthParameters:
                  ApiKeyName: no_auth_needed
                  ApiKeyValue: no_auth_needed
  I8cSalesforceConnection:
      Type: AWS::Events::Connection
      Properties: 
          AuthorizationType: OAUTH_CLIENT_CREDENTIALS
          AuthParameters:
              OAuthParameters:
                  AuthorizationEndpoint: !Ref SalesforceOauthUrl
                  ClientParameters: 
                      ClientID: !Ref SalesforceOauthClientId
                      ClientSecret: !Ref SalesforceOauthClientSecret
                  HttpMethod: POST
                  OAuthHttpParameters: 
                      BodyParameters: 
                          -   IsValueSecret: false
                              Key: grant_type
                              Value: password
                          -   IsValueSecret: false
                              Key: username
                              Value: !Ref SalesforceUsername
                          -   IsValueSecret: true
                              Key: password
                              Value: !Ref SalesforcePassword
  # EventBridge API Destinations
  I8cMailchimpApiDestination:
      Type: AWS::Events::ApiDestination
      Properties:
          ConnectionArn: !GetAtt 'I8cMailchimpConnection.Arn'
          InvocationEndpoint: !Ref MailchimpMembersUrl
          HttpMethod: POST
          InvocationRateLimitPerSecond: 10

  I8cMSTeamsApiDestination:
      Type: AWS::Events::ApiDestination
      Properties:
          ConnectionArn: !GetAtt 'I8cMsteamsConnection.Arn'
          InvocationEndpoint: !Ref MSTeamsWebhookUrl
          HttpMethod: POST
          InvocationRateLimitPerSecond: 5
  
  I8cSalesforceApiDestination:
      Type: AWS::Events::ApiDestination
      Properties:
          ConnectionArn: !GetAtt 'I8cSalesforceConnection.Arn'
          InvocationEndpoint: !Ref SalesforceUrl
          HttpMethod: POST
          InvocationRateLimitPerSecond: 5
  
  # EventBridge Delivery Rule (with 2 targets)
  I8cHandleNewCustomerDeliveryRule:
      Type: AWS::Events::Rule
      Properties:
          EventBusName: !Ref EventbusName
          EventPattern:
              source:
                  - "magento.customers"
          State: "ENABLED"
          Targets:
              -
                  Id: mailchimp-target
                  Arn: !GetAtt I8cMailchimpApiDestination.Arn
                  RoleArn: !GetAtt I8cHandleNewCustomerDeliveryTargetRole.Arn
                  InputTransformer:
                      InputPathsMap:
                          email: $.detail.email
                          firstname: $.detail.firstname
                          lastname: $.detail.lastname
                      InputTemplate: >
                          {
                              "email_address": <email>,
                              "email_type": "html",
                              "status": "subscribed",
                              "merge_fields": {
                                  "FNAME": <firstname>,
                                  "LNAME": <lastname>
                              },
                              "tags": [ "demo-eventbridge"]
                          }
              -
                  Id: msteams-target
                  Arn: !GetAtt I8cMSTeamsApiDestination.Arn
                  RoleArn: !GetAtt I8cHandleNewCustomerDeliveryTargetRole.Arn
                  InputTransformer:
                      InputPathsMap:
                          email: $.detail.email
                          firstname: $.detail.firstname
                          lastname: $.detail.lastname
                          createdat: $.detail.created_at
                      InputTemplate: >
                          {
                              "@type": "MessageCard",
                              "@context": "http://schema.org/extensions",
                              "themeColor": "EA6518",
                              "summary": "New customer on Magento",
                              "sections": [
                                  {
                                  "activityTitle": "New customer registerd on Magento 🚀 ",
                                  "activitySubtitle": "Amazon Eventbridge demo",
                                  "facts": [
                                  {
                                      "name": "Firstname",
                                      "value": <firstname>
                                  }, {
                                      "name": "Lastname",
                                      "value": <lastname>
                                  }, {
                                      "name": "Email",
                                      "value": <email>
                                  },
                                  {
                                      "name": "Created at",
                                      "value": <createdat>
                                  }],
                                  "markdown": true
                              }],
                              "potentialAction": [
                                  {
                                  "@type": "OpenUri",
                                  "name": "View in Magento",
                                  "targets": [{
                                      "os": "default",
                                      "uri": "https://docs.microsoft.com/outlook/actionable-messages"
                                  }]
                              }]
                          }
              -
                  Id: salesforce-target
                  Arn: !GetAtt I8cSalesforceApiDestination.Arn
                  RoleArn: !GetAtt I8cHandleNewCustomerDeliveryTargetRole.Arn
                  InputTransformer:
                      InputPathsMap:
                          email: $.detail.email
                          firstname: $.detail.firstname
                          lastname: $.detail.lastname
                          magentoId: $.detail.id
                      InputTemplate: >
                          {
                              "LastName": <lastname>,
                              "FirstName": <firstname>,
                              "Email": <email>,
                              "Source_System__c": "Magento",
                              "magentoId__c": <magentoId>
                          }
  
  # IAM Role
  I8cHandleNewCustomerDeliveryTargetRole:
      Type: AWS::IAM::Role
      Properties: 
          AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                  - 
                      Effect: Allow
                      Principal:
                          Service:
                              - events.amazonaws.com
                      Action:
                          - 'sts:AssumeRole'
          Policies:
              -   PolicyName: root
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - 
                              Effect: Allow
                              Action: 'events:InvokeApiDestination'
                              Resource:
                                  - !GetAtt I8cMailchimpApiDestination.Arn
                                  - !GetAtt I8cMSTeamsApiDestination.Arn
                                  - !GetAtt I8cSalesforceApiDestination.Arn



